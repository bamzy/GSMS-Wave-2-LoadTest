<?xml version="1.0" encoding="utf-8"?>
<HTTPSnapshot xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" id="226">
  <HTTPTask id="6102" hostname="graduate-studies-apply-uat.ualberta.ca" path="https://graduate-studies-apply-uat.ualberta.ca/urd/sits.urd/run/siw_portal.url?29DC62E3DA1B4844wQ2KqzVxfh5Q_ivAwW3s8gReLnlksVBFj8e8Q8oMRQj0CWCSaFT5H1ht7-_R5243MobTdWPWkoiq8szCXAOLikwt6Nte42NT2T6EmFd9k9Y" url="https://graduate-studies-apply-uat.ualberta.ca/urd/sits.urd/run/siw_portal.url?29DC62E3DA1B4844wQ2KqzVxfh5Q_ivAwW3s8gReLnlksVBFj8e8Q8oMRQj0CWCSaFT5H1ht7-_R5243MobTdWPWkoiq8szCXAOLikwt6Nte42NT2T6EmFd9k9Y" ip="129.128.12.49" port="443" connectionId="52" origin="Primary" frame="1" startDateTime="2019-01-02T11:43:29.412-05:00" startTime="1085862046" endTime="1085862062">
    <QueryString>
      <HTTPDataSet>
        <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
          <ActualData>MjlEQzYyRTNEQTFCNDg0NHdRMktxelZ4Zmg1UV9pdkF3VzNzOGdSZUxubGtzVkJGajhlOFE4b01SUWowQ1dDU2FGVDVIMWh0Ny1fUjUyNDNNb2JUZFdQV2tvaXE4c3pDWEFPTGlrd3Q2TnRlNDJOVDJUNkVtRmQ5azlZ</ActualData>
        </HTTPData>
      </HTTPDataSet>
      <IsExternalData>false</IsExternalData>
    </QueryString>
    <HTTPSplittedQueryStrings>
      <HTTPHeaderEntity name="" index="0">
        <HTTPDataSet>
          <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
            <ActualData>MjlEQzYyRTNEQTFCNDg0NHdRMktxelZ4Zmg1UV9pdkF3VzNzOGdSZUxubGtzVkJGajhlOFE4b01SUWowQ1dDU2FGVDVIMWh0Ny1fUjUyNDNNb2JUZFdQV2tvaXE4c3pDWEFPTGlrd3Q2TnRlNDJOVDJUNkVtRmQ5azlZ</ActualData>
          </HTTPData>
        </HTTPDataSet>
        <IsExternalData>false</IsExternalData>
      </HTTPHeaderEntity>
    </HTTPSplittedQueryStrings>
    <HTTPRequest method="GET">
      <HTTPHeaders>
        <HTTPHeaderEntity name="User-Agent" index="0">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>TW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV09XNjQ7IHJ2OjY0LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvNjQuMA==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Accept" index="1">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>dGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksKi8qO3E9MC44</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Accept-Language" index="2">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>ZW4tR0IsZW47cT0wLjU=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Accept-Encoding" index="3">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>Z3ppcCwgZGVmbGF0ZQ==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Referer" index="4">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>aHR0cHM6Ly9ncmFkdWF0ZS1zdHVkaWVzLWFwcGx5LXVhdC51YWxiZXJ0YS5jYS91cmQvc2l0cy51cmQvcnVuL1NJV19MR04=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="DNT" index="5">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>MQ==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Cookie" index="6">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>RVZJU0lPTkxPR0lOTEFORz07IEVWSVNJT05MT0dJTkhUVj07IEVWSVNJT05JRD03ODFCRkEyMzJERkE0MDFBQjQ4MUYzQ0Y1QzYxRDZDMDsgSlNFU1NJT05JRD0xRDdCNDYzNTkyMDU1RTU3ODhEQTAwMjcxNzk2OEJGRDsgQklHaXBTZXJ2ZXJTSVRTQVBQLVVBVC1IVFRQLmFwcH5TSVRTQVBQLVVBVC1IVFRQX3Bvb2w9MTA5Mjc1NDA5Mi4zNjg5NS4wMDAwOyBCSUdpcFNlcnZlclNoYXJlZElJUy1VQVQ9NzU3MjA5NzcyLjIwNDgwLjAwMDA=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Upgrade-Insecure-Requests" index="7">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>MQ==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Host" index="8">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>Z3JhZHVhdGUtc3R1ZGllcy1hcHBseS11YXQudWFsYmVydGEuY2E=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPAllHeaders>
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>R0VUIGh0dHBzOi8vZ3JhZHVhdGUtc3R1ZGllcy1hcHBseS11YXQudWFsYmVydGEuY2EvdXJkL3NpdHMudXJkL3J1bi9zaXdfcG9ydGFsLnVybD8yOURDNjJFM0RBMUI0ODQ0d1EyS3F6VnhmaDVRX2l2QXdXM3M4Z1JlTG5sa3NWQkZqOGU4UThvTVJRajBDV0NTYUZUNUgxaHQ3LV9SNTI0M01vYlRkV1BXa29pcThzekNYQU9MaWt3dDZOdGU0Mk5UMlQ2RW1GZDlrOVkgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChXaW5kb3dzIE5UIDEwLjA7IFdPVzY0OyBydjo2NC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzY0LjANCkFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksKi8qO3E9MC44DQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLUdCLGVuO3E9MC41DQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUNClJlZmVyZXI6IGh0dHBzOi8vZ3JhZHVhdGUtc3R1ZGllcy1hcHBseS11YXQudWFsYmVydGEuY2EvdXJkL3NpdHMudXJkL3J1bi9TSVdfTEdODQpETlQ6IDENCkNvb2tpZTogRVZJU0lPTkxPR0lOTEFORz07IEVWSVNJT05MT0dJTkhUVj07IEVWSVNJT05JRD03ODFCRkEyMzJERkE0MDFBQjQ4MUYzQ0Y1QzYxRDZDMDsgSlNFU1NJT05JRD0xRDdCNDYzNTkyMDU1RTU3ODhEQTAwMjcxNzk2OEJGRDsgQklHaXBTZXJ2ZXJTSVRTQVBQLVVBVC1IVFRQLmFwcH5TSVRTQVBQLVVBVC1IVFRQX3Bvb2w9MTA5Mjc1NDA5Mi4zNjg5NS4wMDAwOyBCSUdpcFNlcnZlclNoYXJlZElJUy1VQVQ9NzU3MjA5NzcyLjIwNDgwLjAwMDANClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENCkhvc3Q6IGdyYWR1YXRlLXN0dWRpZXMtYXBwbHktdWF0LnVhbGJlcnRhLmNhDQoNCg==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPAllHeaders>
        <HTTPCookies>
          <HTTPHeaderEntity name="EVISIONLOGINLANG" index="0">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData />
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="EVISIONLOGINHTV" index="1">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData />
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="EVISIONID" index="2">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>NzgxQkZBMjMyREZBNDAxQUI0ODFGM0NGNUM2MUQ2QzA=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="JSESSIONID" index="3">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>MUQ3QjQ2MzU5MjA1NUU1Nzg4REEwMDI3MTc5NjhCRkQ=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="BIGipServerSITSAPP-UAT-HTTP.app~SITSAPP-UAT-HTTP_pool" index="4">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>MTA5Mjc1NDA5Mi4zNjg5NS4wMDAw</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="BIGipServerSharedIIS-UAT" index="5">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>NzU3MjA5NzcyLjIwNDgwLjAwMDA=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
        </HTTPCookies>
      </HTTPHeaders>
    </HTTPRequest>
    <HTTPResponse>
      <contentLenght>9598</contentLenght>
      <HTTPHeaders>
        <HTTPHeaderEntity name="Cache-Control" index="0">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>bm8tc3RvcmUsIG5vLWNhY2hlLCBtdXN0LXJldmFsaWRhdGU=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Content-Type" index="1">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>dGV4dC9odG1sO2NoYXJzZXQ9VVRGLTg=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Expires" index="2">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>VGh1LCAwMSBKYW4gMTk3MCAwMDowMDowMCBHTVQ=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="X-Frame-Options" index="3">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>ZGVueQ==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="X-Content-Type-Options" index="4">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>bm9zbmlmZg==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="X-XSS-Protection" index="5">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>MTsgbW9kZT1ibG9jaw==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="X-Powered-By" index="6">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>QVJSLzMuMCxBU1AuTkVU</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Date" index="7">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>V2VkLCAwMiBKYW4gMjAxOSAxNjo0MzowNyBHTVQ=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Content-Length" index="8">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>OTU5OA==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Vary" index="9">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>QWNjZXB0LUVuY29kaW5n</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Content-Encoding" index="10">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>Z3ppcA==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Connection" index="11">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>S2VlcC1BbGl2ZQ==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPAllHeaders>
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>SFRUUC8xLjEgMjAwIE9LDQpDYWNoZS1Db250cm9sOiBuby1zdG9yZSwgbm8tY2FjaGUsIG11c3QtcmV2YWxpZGF0ZQ0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWw7Y2hhcnNldD1VVEYtOA0KRXhwaXJlczogVGh1LCAwMSBKYW4gMTk3MCAwMDowMDowMCBHTVQNClgtRnJhbWUtT3B0aW9uczogZGVueQ0KWC1Db250ZW50LVR5cGUtT3B0aW9uczogbm9zbmlmZg0KWC1YU1MtUHJvdGVjdGlvbjogMTsgbW9kZT1ibG9jaw0KWC1Qb3dlcmVkLUJ5OiBBUlIvMy4wLEFTUC5ORVQNCkRhdGU6IFdlZCwgMDIgSmFuIDIwMTkgMTY6NDM6MDcgR01UDQpDb250ZW50LUxlbmd0aDogOTU5OA0KVmFyeTogQWNjZXB0LUVuY29kaW5nDQpDb250ZW50LUVuY29kaW5nOiBnemlwDQpDb25uZWN0aW9uOiBLZWVwLUFsaXZlDQoNCg==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPAllHeaders>
      </HTTPHeaders>
      <HTTPBody>
        <HTTPDataSet>
          <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
            <ActualData></ActualData>
          </HTTPData>
        </HTTPDataSet>
        <IsExternalData>false</IsExternalData>
      </HTTPBody>
      <TcpPackets>
        <PacketInfo time="1085862046" offset="0" length="400" />
        <PacketInfo time="1085862062" offset="400" length="9598" />
      </TcpPackets>
    </HTTPResponse>
    <HTTPTask id="6107" hostname="graduate-studies-apply-uat.ualberta.ca" path="https://graduate-studies-apply-uat.ualberta.ca/urd/sits.urd/javascript/settings.js?v=881.2" url="https://graduate-studies-apply-uat.ualberta.ca/urd/sits.urd/javascript/settings.js?v=881.2" ip="129.128.12.49" port="443" connectionId="53" origin="HTML" frame="1" startDateTime="2019-01-02T11:43:29.430-05:00" startTime="1085862296" endTime="1085862312">
      <QueryString>
        <HTTPDataSet>
          <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
            <ActualData>dj04ODEuMg==</ActualData>
          </HTTPData>
        </HTTPDataSet>
        <IsExternalData>false</IsExternalData>
      </QueryString>
      <HTTPSplittedQueryStrings>
        <HTTPHeaderEntity name="v" index="0">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>ODgxLjI=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
      </HTTPSplittedQueryStrings>
      <HTTPRequest method="GET">
        <HTTPHeaders>
          <HTTPHeaderEntity name="User-Agent" index="0">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>TW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV09XNjQ7IHJ2OjY0LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvNjQuMA==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Accept" index="1">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Ki8q</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Accept-Language" index="2">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>ZW4tR0IsZW47cT0wLjU=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Accept-Encoding" index="3">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Z3ppcCwgZGVmbGF0ZQ==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Referer" index="4">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>aHR0cHM6Ly9ncmFkdWF0ZS1zdHVkaWVzLWFwcGx5LXVhdC51YWxiZXJ0YS5jYS91cmQvc2l0cy51cmQvcnVuL3Npd19wb3J0YWwudXJsPzI5REM2MkUzREExQjQ4NDR3UTJLcXpWeGZoNVFfaXZBd1czczhnUmVMbmxrc1ZCRmo4ZThROG9NUlFqMENXQ1NhRlQ1SDFodDctX1I1MjQzTW9iVGRXUFdrb2lxOHN6Q1hBT0xpa3d0Nk50ZTQyTlQyVDZFbUZkOWs5WQ==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="DNT" index="5">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>MQ==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Cookie" index="6">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>SlNFU1NJT05JRD0xRDdCNDYzNTkyMDU1RTU3ODhEQTAwMjcxNzk2OEJGRDsgQklHaXBTZXJ2ZXJTSVRTQVBQLVVBVC1IVFRQLmFwcH5TSVRTQVBQLVVBVC1IVFRQX3Bvb2w9MTA5Mjc1NDA5Mi4zNjg5NS4wMDAwOyBCSUdpcFNlcnZlclNoYXJlZElJUy1VQVQ9NzU3MjA5NzcyLjIwNDgwLjAwMDA=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Host" index="7">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Z3JhZHVhdGUtc3R1ZGllcy1hcHBseS11YXQudWFsYmVydGEuY2E=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPAllHeaders>
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>R0VUIGh0dHBzOi8vZ3JhZHVhdGUtc3R1ZGllcy1hcHBseS11YXQudWFsYmVydGEuY2EvdXJkL3NpdHMudXJkL2phdmFzY3JpcHQvc2V0dGluZ3MuanM/dj04ODEuMiBIVFRQLzEuMQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV09XNjQ7IHJ2OjY0LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvNjQuMA0KQWNjZXB0OiAqLyoNCkFjY2VwdC1MYW5ndWFnZTogZW4tR0IsZW47cT0wLjUNCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZQ0KUmVmZXJlcjogaHR0cHM6Ly9ncmFkdWF0ZS1zdHVkaWVzLWFwcGx5LXVhdC51YWxiZXJ0YS5jYS91cmQvc2l0cy51cmQvcnVuL3Npd19wb3J0YWwudXJsPzI5REM2MkUzREExQjQ4NDR3UTJLcXpWeGZoNVFfaXZBd1czczhnUmVMbmxrc1ZCRmo4ZThROG9NUlFqMENXQ1NhRlQ1SDFodDctX1I1MjQzTW9iVGRXUFdrb2lxOHN6Q1hBT0xpa3d0Nk50ZTQyTlQyVDZFbUZkOWs5WQ0KRE5UOiAxDQpDb29raWU6IEpTRVNTSU9OSUQ9MUQ3QjQ2MzU5MjA1NUU1Nzg4REEwMDI3MTc5NjhCRkQ7IEJJR2lwU2VydmVyU0lUU0FQUC1VQVQtSFRUUC5hcHB+U0lUU0FQUC1VQVQtSFRUUF9wb29sPTEwOTI3NTQwOTIuMzY4OTUuMDAwMDsgQklHaXBTZXJ2ZXJTaGFyZWRJSVMtVUFUPTc1NzIwOTc3Mi4yMDQ4MC4wMDAwDQpIb3N0OiBncmFkdWF0ZS1zdHVkaWVzLWFwcGx5LXVhdC51YWxiZXJ0YS5jYQ0KDQo=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPAllHeaders>
          <HTTPCookies>
            <HTTPHeaderEntity name="JSESSIONID" index="0">
              <HTTPDataSet>
                <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                  <ActualData>MUQ3QjQ2MzU5MjA1NUU1Nzg4REEwMDI3MTc5NjhCRkQ=</ActualData>
                </HTTPData>
              </HTTPDataSet>
              <IsExternalData>false</IsExternalData>
            </HTTPHeaderEntity>
            <HTTPHeaderEntity name="BIGipServerSITSAPP-UAT-HTTP.app~SITSAPP-UAT-HTTP_pool" index="1">
              <HTTPDataSet>
                <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                  <ActualData>MTA5Mjc1NDA5Mi4zNjg5NS4wMDAw</ActualData>
                </HTTPData>
              </HTTPDataSet>
              <IsExternalData>false</IsExternalData>
            </HTTPHeaderEntity>
            <HTTPHeaderEntity name="BIGipServerSharedIIS-UAT" index="2">
              <HTTPDataSet>
                <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                  <ActualData>NzU3MjA5NzcyLjIwNDgwLjAwMDA=</ActualData>
                </HTTPData>
              </HTTPDataSet>
              <IsExternalData>false</IsExternalData>
            </HTTPHeaderEntity>
          </HTTPCookies>
        </HTTPHeaders>
      </HTTPRequest>
      <HTTPResponse>
        <contentLenght>2560</contentLenght>
        <HTTPHeaders>
          <HTTPHeaderEntity name="Content-Type" index="0">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>YXBwbGljYXRpb24vamF2YXNjcmlwdA==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Last-Modified" index="1">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>VGh1LCAyOCBKdWwgMjAxNiAxNzozODo1NiBHTVQ=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Accept-Ranges" index="2">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Ynl0ZXM=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="ETag" index="3">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>IjAzODNlZWFmNmU4ZDExOjAi</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Server" index="4">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>TWljcm9zb2Z0LUlJUy84LjU=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="X-Powered-By" index="5">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>QVNQLk5FVA==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Date" index="6">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>V2VkLCAwMiBKYW4gMjAxOSAxNjo0MzowNyBHTVQ=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Content-Length" index="7">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>MjU2MA==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Vary" index="8">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>QWNjZXB0LUVuY29kaW5n</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Content-Encoding" index="9">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Z3ppcA==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Connection" index="10">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>S2VlcC1BbGl2ZQ==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPAllHeaders>
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>SFRUUC8xLjEgMjAwIE9LDQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2phdmFzY3JpcHQNCkxhc3QtTW9kaWZpZWQ6IFRodSwgMjggSnVsIDIwMTYgMTc6Mzg6NTYgR01UDQpBY2NlcHQtUmFuZ2VzOiBieXRlcw0KRVRhZzogIjAzODNlZWFmNmU4ZDExOjAiDQpTZXJ2ZXI6IE1pY3Jvc29mdC1JSVMvOC41DQpYLVBvd2VyZWQtQnk6IEFTUC5ORVQNCkRhdGU6IFdlZCwgMDIgSmFuIDIwMTkgMTY6NDM6MDcgR01UDQpDb250ZW50LUxlbmd0aDogMjU2MA0KVmFyeTogQWNjZXB0LUVuY29kaW5nDQpDb250ZW50LUVuY29kaW5nOiBnemlwDQpDb25uZWN0aW9uOiBLZWVwLUFsaXZlDQoNCg==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPAllHeaders>
        </HTTPHeaders>
        <HTTPBody>
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>Ly8gRGVmaW5lcyB0aGUgc3BlZWQgb2YgYW5pbWF0aW9ucyBpbiBtaWxsaXNlY29uZHMgKG1zKS4NCi8vIFRoZSBzdHJpbmdzICJmYXN0IiAoMjAwbXMpIGFuZCAic2xvdyIgKDYwMG1zKSBjYW4gYWxzbyBiZSB1c2VkLg0KLy8gRGVmYXVsdCB2YWx1ZSBpcyAxMDAuDQp2YXIgc2l0c19hbmltX3NwZWVkID0gMTAwOw0KDQovLyBEZWZpbmVzIHRoZSBwb2ludCBhdCB3aGljaCB0aGUgeWVhciAiMjAiIGlzIHRyZWF0ZWQgYXMgMTkyMCBpbnN0ZWFkIG9mIDIwMjAuDQovLyBUaGlzIHNob3VsZCBiZSB0aGUgc2FtZSBhcyB0aGUgYXNzaWdubWVudCBmaWxlIHNldHRpbmcgJENFTlRVUllfQlJFQUsuDQovLyBEZWZhdWx0IHZhbHVlIGlzIDIwLg0KdmFyIHNpdHNfY2VudHVyeV9icmVhayA9IDIwOw0KDQovLyBEZWZpbmVzIHdoZXRoZXIgb3Igbm90IGEgQ29udGVudCBEZWxpdmVyeSBOZXR3b3JrIChDRE4pIHNob3VsZCBiZSB1c2VkIChhZGRlZCBpbiA4NzAuMSkuDQovLyBVc2luZyBvbmUgY2FuIHNwZWVkIHVwIHRoZSBwZXJmb3JtYW5jZSwgZXNwZWNpYWxseSBmb3IgdXNlcnMgaW4gb3RoZXIgY291bnRyaWVzLg0KLy8gRGVmYXVsdCB2YWx1ZSBpcyAwLg0KLy8gVmFsaWQgdmFsdWVzOg0KLy8gICAwID0gVXNlIGxvY2FsIGZpbGVzIChubyBDRE4pDQovLyAgIDEgPSBqUXVlcnkgQ0ROIC0gcHJvdmlkZWQgYnkgTWF4Q0ROICh0aGUgb2ZmaWNpYWwgalF1ZXJ5IG9uZSkNCi8vICAgMiA9IEdvb2dsZSBBUEkgQ0ROIC0gcHJvdmlkZWQgYnkgR29vZ2xlIChnZW5lcmFsbHkgY29uc2lkZXJlZCB0byBiZSBmYXN0ZXN0IGFuZCBtb3N0IHBvcHVsYXIpDQovLyAgIDMgPSBNaWNyb3NvZnQgQWpheCBDRE4gLSBwcm92aWRlZCBieSBNaWNyb3NvZnQNCi8vICAgNCA9IENsb3VkIEZsYXJlIENETiAtIHByb3ZpZGVkIGJ5IENsb3VkIEZsYXJlDQp2YXIgc2l0c19qcXVlcnlfY2RuID0gMDsNCg0KLy8gRGVmaW5lcyB0aGUgZm9ybWF0IG9mIGRhdGVzIHNlbGVjdGVkIGJ5IGEgZGF0ZSBwaWNrZXIgKGFkZGVkIGluIDg3MC4xKQ0KLy8gVGhpcyBtdXN0IGJlIGNvbXBhdGlibGUgd2l0aCB0aGUgc3lzdGVtIE5hdGlvbmFsIExhbmd1YWdlIFN1cHBvcnQgKE5MUykgc2V0dGluZ3MNCi8vIFNlZSBqUXVlcnkgVUkgd2Vic2l0ZSBmb3Igc3ludGF4IGRldGFpbHMgLSBodHRwOi8vYXBpLmpxdWVyeXVpLmNvbS9kYXRlcGlja2VyLyN1dGlsaXR5LWZvcm1hdERhdGUNCi8vIERlZmF1bHQgdmFsdWUgaXMgImRkL00veXkiLCBpZTogIjAxL0phbi8yMDAxIi4NCnZhciBzaXRzX2RhdGVfZm9ybWF0ID0gImRkL00veXkiDQovLyBHQiAvIFVLID0NCi8vIHZhciBzaXRzX2RhdGVfZm9ybWF0ID0gImQgTSB5eSI7DQovLyBDQSAoQ2FuYWRhKSA9DQovLyB2YXIgc2l0c19kYXRlX2Zvcm1hdCA9ICJ5eS1tbS1kZCI7DQovLyBVUyAoVVNBKSA9DQovLyB2YXIgc2l0c19kYXRlX2Zvcm1hdCA9ICJNIGQsIHl5IjsNCg0KLy8gRGVmaW5lcyB0aGUgZm9ybWF0IG9mIHRpbWVzIHVzaW5nICZEIG5vdGF0aW9uIChhZGRlZCBpbiA4NzEuMSkNCi8vIFRoaXMgbXVzdCBiZSBjb21wYXRpYmxlIHdpdGggdGhlIHN5c3RlbSBOYXRpb25hbCBMYW5ndWFnZSBTdXBwb3J0IChOTFMpIHNldHRpbmdzDQovLyBEZWZhdWx0IHZhbHVlIGlzICJIMjpOMiIsIGllOiAwOTozMA0KdmFyIHNpdHNfdGltZV9mb3JtYXQgPSAiSDI6TjIiOw0KDQovLyBEZWZpbmVzIHRoZSBhbHRlcm5hdGl2ZSB0ZXh0IGZvciBkYXRlIHBpY2tlciBidXR0b25zIChhZGRlZCBpbiA4ODAuMSkNCi8vIERlZmF1bHQgdmFsdWUgaXMgIi4uLiINCnZhciBzaXRzX2J1dHRvbl90ZXh0ID0gIi4uLiI7DQoNCi8vIERlZmluZXMgdGhlIG1heGltdW0gZmlsZSBzaXplIGZvciBhIGZpbGUgYmVpbmcgdXBsb2FkZWQgdXNpbmcgdGhlIHBsdXBsb2FkIHBsdWdpbiAoYWRkZWQgaW4gODgwLjEpDQovLyBEZWZhdWx0IHZhbHVlIGlzICIxMG1iIg0KdmFyIHNpdHNfcGx1cGxvYWRfbWF4X3NpemUgPSAiMTBtYiI7DQoNCi8vIERlZmluZXMgdGhlIGNodW5rIHNpemUgZm9yIGZpbGVzIGJlaW5nIHVwbG9hZGVkIHVzaW5nIHRoZSBwbHVwbG9hZCBwbHVnaW4gKGFkZGVkIGluIDg4MC4xKQ0KLy8gRGVmYXVsdCB2YWx1ZSBpcyAiMm1iIg0KdmFyIHNpdHNfcGx1cGxvYWRfY2h1bmtfc2l6ZSA9ICIybWIiOw0KDQovLyBMb2FkIG1pbmlmaWVkIEphdmFzY3JpcHQgcGx1Z2luIGZpbGVzIHdoZXJlIHBvc3NpYmxlIChhZGRlZCBpbiA4ODAuMSkNCi8vIFVzZWQgZm9yIHBsdWdpbnM6IGRhdGF0YWJsZXMsIG1pZ3JhdGUsIG1lbnUsIGNob3NlbiBhbmQgc2l0c2pxdGltZXRhYmxlDQp2YXIgc2l0c191c2VfbWluaWZpZWQgPSB0cnVlOw0KDQovLyBEZWZpbmVzIHRoZSB5ZWFyIHJhbmdlIGF2YWlsYWJsZSBpbiB0aGUgZGF0ZSBwaWNrZXIgKGFkZGVkIGluIDg4MC4xKQ0KLy8gU2VlIGpRdWVyeSBVSSB3ZWJzaXRlIGZvciBzeW50YXggZGV0YWlscyAtIGh0dHA6Ly9hcGkuanF1ZXJ5dWkuY29tL2RhdGVwaWNrZXIvI29wdGlvbi15ZWFyUmFuZ2UNCi8vIERlZmF1bHQgdmFsdWUgaXMgIi0xMDA6KzUwIiwgaWU6IDEwMCB5ZWFycyBiZWZvcmUgYW5kIDUwIHllYXJzIGFmdGVyIGN1cnJlbnQgeWVhcg0KdmFyIHNpdHNfeWVhcl9yYW5nZSA9ICItMTAwOis1MCI7DQoNCi8vIERlZmluZXMgdGhlIHJlc3BvbnNpdmUgYnJlYWtwb2ludHMgdG8gdXNlIGluIGU6VmlzaW9uIGluIHNpdHVhdGlvbnMgd2hlcmUgdGhvc2UgZGVmaW5lZCBpbiB0aGUgc3R5bGVzaGVldCBjYW5ub3QgYmUgdXNlZCAoYWRkZWQgaW4gOTEwLjEpDQovLyBUaGlzIGluY2x1ZGVzLCBmb3IgZXhhbXBsZSwgdGhvc2UgdXNlZCBieSB0aGUgUmVzcG9uc2l2ZSBleHRlbnNpb24gZm9yIERhdGF0YWJsZXMgKGFzIHVzZWQgdGhyb3VnaG91dCBlOlZpc2lvbiksIGFuZCBzaG91bGQgbm9ybWFsbHkgbWF0Y2ggdGhvc2UgbWF4aW11bXMgZGVmaW5lZCBpbiBzdi5jc3MuDQovLyBJdCB0YWtlcyB0aGUgZm9ybSBvZiBhbiBvYmplY3QgbGlzdGluZyBlYWNoIGJyZWFrcG9pbnQsIGFuZCBzaG91bGQgaW5jbHVkZSBtYXhpbXVtIHZhbHVlcyAoaW4gcGl4ZWxzKSBmb3IgdGhlIHdpZHRoIHRoYXQgc2hvdWxkIGFwcGx5IGZvciBMYXJnZSAobGcpLCBNZWRpdW0gKG1kKSwgU21hbGwgKHNtKSBhbmQgRXh0cmEgU21hbGwgKHhzKSBzY3JlZW5zaXplcw0KdmFyIHNpdHNfYnJlYWtwb2ludHMgPSB7ImxnIjogSW5maW5pdHksICJtZCI6IDExOTksICJzbSI6IDk5MSwgInhzIjogNzY3fTsNCg0KLy8gRGVmaW5lcyB3aGV0aGVyIHRvIGF1dG9tYXRpY2FsbHkgYXBwbHkgZTpWaXNpb24gdGFibGUgd2lkZ2V0cyAoRGF0YXRhYmxlcyBhbmQgVGFibGVzYXcpIHRvIHRhYmxlcyB3aGVuIHRoZSByZWxldmFudCBIVE1MNSBkYXRhIGF0dHJpYnV0ZXMgYXJlIHNwZWNpZmllZA0KLy8gQWRkZWQgaW4gOTEwLjEgLSBhY2NlcHRzIHRydWUgb3IgZmFsc2UgKHRvIGVuYWJsZSBvciBkaXNhYmxlIHJlc3BlY3RpdmVseSkNCnZhciBzaXRzX2F1dG9fdGFibGVfd2lkZ2V0cyA9IHRydWU7DQoNCi8vIERlZmluZXMgd2hldGhlciBEYXRhVGFibGVzIHNob3VsZCB1c2UgdGhlaXIgcmVzcG9uc2l2ZSBtb2RlIChpZiBhdmFpbGFibGUpIGJ5IGRlZmF1bHQuIFRoaXMgYXBwbGllcyB3aGVuIHRoZSByZXNwb25zaXZlIG1vZGUgaXNuJ3QgZXhwbGljaXRseSBzZXQgZm9yIGEgcGFydGljdWxhciB0YWJsZSAoaWYgaXQgd2FzIHRoZW4gaXQgd291bGQgb3ZlcnJpZGUgdGhpcyBzZXR0aW5nKQ0KLy8gQWRkZWQgaW4gOTEwLjEgLSBhY2NlcHRzIHRydWUgb3IgZmFsc2UgKHRvIGVuYWJsZSBvciBkaXNhYmxlIHJlc3BlY3RpdmVseSkNCnZhciBzaXRzX2RhdGF0YWJsZV9yZXNwb25zaXZlID0gdHJ1ZTsNCg0KLy8gRGVmaW5lcyBhbnkgc2NhbGUgZmFjdG9ycyB0byBhcHBseSB0byBkaWFsb2dzIChwcm9kdWNlZCBieSBzaXRzX2RpYWxvZykgZm9yIGVhY2ggYnJlYWtwb2ludC4gRm9yIGV4YW1wbGUsIGlmIGEgZGlhbG9nIGlzIG5vcm1hbGx5IDQwJSBvZiB0aGUgc2NyZWVuIHdpZHRoIGZvciB0aGUgTGFyZ2UgKGxnKQ0KLy8gYnJlYWtwb2ludCB0aGVuIHdlIGNvdWxkIHVzZSBhIHNjYWxlIGZhY3RvciBvZiAyIHRvIG1ha2UgaXQgODAlIGF0IHRoZSBtZWRpdW0gYnJlYWtwb2ludC4gSXQgY29uc2lzdHMgb2YgYW4gb2JqZWN0IGxpc3RpbmcgZmFjdG9ycyBmb3IgZWFjaCBicmVha3BvaW50LCBidXQgbm8gZGlhbG9nIHdpbGwgZXZlciBiZQ0KLy8gbW9yZSB0aGFuIDEwMCUgb2YgdGhlIHNjcmVlbi13aWR0aC4gQWRkZWQgaW4gOTEwLjEuDQp2YXIgc2l0c19kaWFsb2dfc2NhbGluZyA9IHsibGciOiAxLCAibWQiOiAxLjEsICJzbSI6IDEuNSwgInhzIjogM307DQoNCi8vIERlZmluZWQgd2hldGhlciB0aGUgaGVpZ2h0IG9mIGEgZGlhbG9nIHNob3VsZCwgYnkgZGVmYXVsdCwgYnkgbGltaXRlZCB0byBiZSBubyBtb3JlIHRoYW4gYSBjZXJ0YWluIHBlcmNlbnRhZ2Ugb2YgdGhlIHNjcmVlbiBoZWlnaHQgYXQgZWFjaCBicmVha3BvaW50LiBGb3IgZXhhbXBsZSwgdGhlIGRlZmF1bHQgb2YNCi8vIDAuOTUgd291bGQgbWVhbiB0aGF0IHRoZSBkaWFsb2dzIHdpbGwgYmUgaW5pdGlhbGx5IHNob3duIGF0IG5vIG1vcmUgdGhhbiA5NSUgb2YgdGhlIGhlaWdodCBvZiB0aGUgcGFnZSAoaS5lLiB3aWxsIGZpdCBvbiBzY3JlZW4pLCBhbmQgMTAgd291bGQgbWVhbiB0aGF0IHRoZXkgY2FuIGJlIDEwIHRpbWVzIHRoZSBoZWlnaHQgb2YgdGhlIHNjcmVlbi4gWW91IGNhbg0KLy8gdXNlICIiIHRvIGRpc2FibGUgdGhlIGxpbWl0IGZvciBhIHBhcnRpY3VsYXIgYnJlYWtwb2ludC4NCi8vIEl0IGNvbnNpc3RzIG9mIGFuIG9iamVjdCBsaXN0aW5nIG1heGltdW0gcmF0aW9zIGZvciBlYWNoIGJyZWFrcG9pbnQuIEFkZGVkIGluIDkxMC4xDQp2YXIgc2l0c19kaWFsb2dfaGVpZ2h0ID0geyJsZyI6IDAuOTUsICJtZCI6IDAuOTUsICJzbSI6ICIiLCAieHMiOiAiIn07DQoNCi8vIERlZmluZXMgd2hldGhlciBjZXJ0YWluIGFjdGlvbnMgc2hvdWxkIGhhcHBlbiBhdXRvbWF0aWNhbGx5IG9uIHNjcmVlbiByZXNpemUgKGluY2x1ZGluZyBkaWFsb2cgcmUtcG9zaXRpb25pbmcgYW5kIHJlc2NhbGluZykuIEFkZGVkIGluIDkxMC4xIC0gYWNjZXB0cyB0cnVlICh0byBhbHdheXMgcHJvY2VzcyBhcyB0aGUgc2NyZWVuIHJlc2l6ZXMgLSBkZWZhdWx0KSwgYW5kIGZhbHNlICh0byBkaXNhYmxlKQ0KdmFyIHNpdHNfYXV0b19yZXNpemUgPSB0cnVlOw0KDQovLyBEZWZpbmVzIHdoZXRoZXIgdG8gdXNlIHRoZSBzdi1wb3J0YWwuY3NzIHN0eWxlc2hlZXQgd2hlbiBzaG93aW5nIG11bHRpcGxlIGNvbHVtbnMgaW4gdGhlIHBvcnRhbC4gVGhlIHN0eWxlc2hlZXQgb3ZlcnJpZGVzIGNlcnRhaW4gYnJlYWtwb2ludHMgd2hlbiBzaG93aW5nIGNvbnRhaW5lciBvcHRpb25zIGluDQovLyBjb250ZW50IG1vZGUsIHdoaWNoIGNhbiBpbXByb3ZlIHRoZSBsb29rIGFuZCBmZWVsIG9mIHRoZSBjb250ZW50IG9uIHNvbWUgc2NyZWVuIHNpemVzLCBhbmQgd2lsbCBvbmx5IGJlIGxvYWRlZCB3aGVuIG5lZWRlZC4gQWRkZWQgaW4gOTEwLjEgLSBhY2NlcHRzIHRydWUgb3IgZmFsc2UgKHRvIGVuYWJsZSBvciBkaXNhYmxlIHJlc3BlY3RpdmVseSwgd2l0aCB0cnVlIHRoZSBkZWZhdWx0KQ0KdmFyIHNpdHNfdXNlX3BvcnRhbF9jc3MgPSB0cnVlOw0KDQovLyBEZWZpbmVzIHRoZSBtaW5pbXVtIHNpemUgZm9yIHRhYnMgdG8gYmUgcmVzaXplZCB0byBpbiBwaXhlbHMgKGFkZGVkIGluIDkyMC4xKQ0KLy8gRGVmYXVsdCB2YWx1ZSBpcyAxNTAuDQp2YXIgc2l0c19taW5fdGFiX3dpZHRoID0gMTUwOw==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPBody>
        <TcpPackets>
          <PacketInfo time="1085862296" offset="0" length="331" />
          <PacketInfo time="1085862312" offset="331" length="2560" />
        </TcpPackets>
      </HTTPResponse>
    </HTTPTask>
    <HTTPTask id="6112" hostname="graduate-studies-apply-uat.ualberta.ca" path="https://graduate-studies-apply-uat.ualberta.ca/urd/sits.urd/css/uoa-sits.css" url="https://graduate-studies-apply-uat.ualberta.ca/urd/sits.urd/css/uoa-sits.css" ip="129.128.12.49" port="443" connectionId="54" origin="HTML" frame="1" startDateTime="2019-01-02T11:43:29.436-05:00" startTime="1085862328" endTime="1085862328">
      <HTTPRequest method="GET">
        <HTTPHeaders>
          <HTTPHeaderEntity name="User-Agent" index="0">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>TW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV09XNjQ7IHJ2OjY0LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvNjQuMA==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Accept" index="1">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>dGV4dC9jc3MsKi8qO3E9MC4x</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Accept-Language" index="2">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>ZW4tR0IsZW47cT0wLjU=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Accept-Encoding" index="3">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Z3ppcCwgZGVmbGF0ZQ==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Referer" index="4">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>aHR0cHM6Ly9ncmFkdWF0ZS1zdHVkaWVzLWFwcGx5LXVhdC51YWxiZXJ0YS5jYS91cmQvc2l0cy51cmQvcnVuL3Npd19wb3J0YWwudXJsPzI5REM2MkUzREExQjQ4NDR3UTJLcXpWeGZoNVFfaXZBd1czczhnUmVMbmxrc1ZCRmo4ZThROG9NUlFqMENXQ1NhRlQ1SDFodDctX1I1MjQzTW9iVGRXUFdrb2lxOHN6Q1hBT0xpa3d0Nk50ZTQyTlQyVDZFbUZkOWs5WQ==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="DNT" index="5">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>MQ==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Cookie" index="6">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>SlNFU1NJT05JRD0xRDdCNDYzNTkyMDU1RTU3ODhEQTAwMjcxNzk2OEJGRDsgQklHaXBTZXJ2ZXJTSVRTQVBQLVVBVC1IVFRQLmFwcH5TSVRTQVBQLVVBVC1IVFRQX3Bvb2w9MTA5Mjc1NDA5Mi4zNjg5NS4wMDAwOyBCSUdpcFNlcnZlclNoYXJlZElJUy1VQVQ9NzU3MjA5NzcyLjIwNDgwLjAwMDA=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Host" index="7">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Z3JhZHVhdGUtc3R1ZGllcy1hcHBseS11YXQudWFsYmVydGEuY2E=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPAllHeaders>
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>R0VUIGh0dHBzOi8vZ3JhZHVhdGUtc3R1ZGllcy1hcHBseS11YXQudWFsYmVydGEuY2EvdXJkL3NpdHMudXJkL2Nzcy91b2Etc2l0cy5jc3MgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChXaW5kb3dzIE5UIDEwLjA7IFdPVzY0OyBydjo2NC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzY0LjANCkFjY2VwdDogdGV4dC9jc3MsKi8qO3E9MC4xDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLUdCLGVuO3E9MC41DQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUNClJlZmVyZXI6IGh0dHBzOi8vZ3JhZHVhdGUtc3R1ZGllcy1hcHBseS11YXQudWFsYmVydGEuY2EvdXJkL3NpdHMudXJkL3J1bi9zaXdfcG9ydGFsLnVybD8yOURDNjJFM0RBMUI0ODQ0d1EyS3F6VnhmaDVRX2l2QXdXM3M4Z1JlTG5sa3NWQkZqOGU4UThvTVJRajBDV0NTYUZUNUgxaHQ3LV9SNTI0M01vYlRkV1BXa29pcThzekNYQU9MaWt3dDZOdGU0Mk5UMlQ2RW1GZDlrOVkNCkROVDogMQ0KQ29va2llOiBKU0VTU0lPTklEPTFEN0I0NjM1OTIwNTVFNTc4OERBMDAyNzE3OTY4QkZEOyBCSUdpcFNlcnZlclNJVFNBUFAtVUFULUhUVFAuYXBwflNJVFNBUFAtVUFULUhUVFBfcG9vbD0xMDkyNzU0MDkyLjM2ODk1LjAwMDA7IEJJR2lwU2VydmVyU2hhcmVkSUlTLVVBVD03NTcyMDk3NzIuMjA0ODAuMDAwMA0KSG9zdDogZ3JhZHVhdGUtc3R1ZGllcy1hcHBseS11YXQudWFsYmVydGEuY2ENCg0K</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPAllHeaders>
          <HTTPCookies>
            <HTTPHeaderEntity name="JSESSIONID" index="0">
              <HTTPDataSet>
                <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                  <ActualData>MUQ3QjQ2MzU5MjA1NUU1Nzg4REEwMDI3MTc5NjhCRkQ=</ActualData>
                </HTTPData>
              </HTTPDataSet>
              <IsExternalData>false</IsExternalData>
            </HTTPHeaderEntity>
            <HTTPHeaderEntity name="BIGipServerSITSAPP-UAT-HTTP.app~SITSAPP-UAT-HTTP_pool" index="1">
              <HTTPDataSet>
                <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                  <ActualData>MTA5Mjc1NDA5Mi4zNjg5NS4wMDAw</ActualData>
                </HTTPData>
              </HTTPDataSet>
              <IsExternalData>false</IsExternalData>
            </HTTPHeaderEntity>
            <HTTPHeaderEntity name="BIGipServerSharedIIS-UAT" index="2">
              <HTTPDataSet>
                <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                  <ActualData>NzU3MjA5NzcyLjIwNDgwLjAwMDA=</ActualData>
                </HTTPData>
              </HTTPDataSet>
              <IsExternalData>false</IsExternalData>
            </HTTPHeaderEntity>
          </HTTPCookies>
        </HTTPHeaders>
      </HTTPRequest>
      <HTTPResponse>
        <contentLenght>11603</contentLenght>
        <HTTPHeaders>
          <HTTPHeaderEntity name="Content-Type" index="0">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>dGV4dC9jc3M=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Last-Modified" index="1">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>VGh1LCAyNSBPY3QgMjAxOCAyMjoxNTo0NSBHTVQ=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Accept-Ranges" index="2">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Ynl0ZXM=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="ETag" index="3">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>IjgwYmU0YjQ2YjA2Y2Q0MTowIg==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Server" index="4">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>TWljcm9zb2Z0LUlJUy84LjU=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="X-Powered-By" index="5">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>QVNQLk5FVA==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Date" index="6">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>V2VkLCAwMiBKYW4gMjAxOSAxNjo0MzowNyBHTVQ=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Content-Length" index="7">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>MTE2MDM=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Vary" index="8">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>QWNjZXB0LUVuY29kaW5n</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Content-Encoding" index="9">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Z3ppcA==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Connection" index="10">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>S2VlcC1BbGl2ZQ==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPAllHeaders>
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>SFRUUC8xLjEgMjAwIE9LDQpDb250ZW50LVR5cGU6IHRleHQvY3NzDQpMYXN0LU1vZGlmaWVkOiBUaHUsIDI1IE9jdCAyMDE4IDIyOjE1OjQ1IEdNVA0KQWNjZXB0LVJhbmdlczogYnl0ZXMNCkVUYWc6ICI4MGJlNGI0NmIwNmNkNDE6MCINClNlcnZlcjogTWljcm9zb2Z0LUlJUy84LjUNClgtUG93ZXJlZC1CeTogQVNQLk5FVA0KRGF0ZTogV2VkLCAwMiBKYW4gMjAxOSAxNjo0MzowNyBHTVQNCkNvbnRlbnQtTGVuZ3RoOiAxMTYwMw0KVmFyeTogQWNjZXB0LUVuY29kaW5nDQpDb250ZW50LUVuY29kaW5nOiBnemlwDQpDb25uZWN0aW9uOiBLZWVwLUFsaXZlDQoNCg==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPAllHeaders>
        </HTTPHeaders>
        <HTTPBody>
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData></ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPBody>
        <TcpPackets>
          <PacketInfo time="1085862328" offset="0" length="319" />
          <PacketInfo time="1085862328" offset="319" length="11603" />
        </TcpPackets>
      </HTTPResponse>
    </HTTPTask>
    <HTTPTask id="6117" hostname="graduate-studies-apply-uat.ualberta.ca" path="https://graduate-studies-apply-uat.ualberta.ca/urd/sits.urd/javascript/sits_ajax.js?v=881.2" url="https://graduate-studies-apply-uat.ualberta.ca/urd/sits.urd/javascript/sits_ajax.js?v=881.2" ip="129.128.12.49" port="443" connectionId="55" origin="HTML" frame="1" startDateTime="2019-01-02T11:43:29.444-05:00" startTime="1085862656" endTime="1085862656">
      <QueryString>
        <HTTPDataSet>
          <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
            <ActualData>dj04ODEuMg==</ActualData>
          </HTTPData>
        </HTTPDataSet>
        <IsExternalData>false</IsExternalData>
      </QueryString>
      <HTTPSplittedQueryStrings>
        <HTTPHeaderEntity name="v" index="0">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>ODgxLjI=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
      </HTTPSplittedQueryStrings>
      <HTTPRequest method="GET">
        <HTTPHeaders>
          <HTTPHeaderEntity name="User-Agent" index="0">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>TW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV09XNjQ7IHJ2OjY0LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvNjQuMA==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Accept" index="1">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Ki8q</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Accept-Language" index="2">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>ZW4tR0IsZW47cT0wLjU=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Accept-Encoding" index="3">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Z3ppcCwgZGVmbGF0ZQ==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Referer" index="4">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>aHR0cHM6Ly9ncmFkdWF0ZS1zdHVkaWVzLWFwcGx5LXVhdC51YWxiZXJ0YS5jYS91cmQvc2l0cy51cmQvcnVuL3Npd19wb3J0YWwudXJsPzI5REM2MkUzREExQjQ4NDR3UTJLcXpWeGZoNVFfaXZBd1czczhnUmVMbmxrc1ZCRmo4ZThROG9NUlFqMENXQ1NhRlQ1SDFodDctX1I1MjQzTW9iVGRXUFdrb2lxOHN6Q1hBT0xpa3d0Nk50ZTQyTlQyVDZFbUZkOWs5WQ==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="DNT" index="5">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>MQ==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Cookie" index="6">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>SlNFU1NJT05JRD0xRDdCNDYzNTkyMDU1RTU3ODhEQTAwMjcxNzk2OEJGRDsgQklHaXBTZXJ2ZXJTSVRTQVBQLVVBVC1IVFRQLmFwcH5TSVRTQVBQLVVBVC1IVFRQX3Bvb2w9MTA5Mjc1NDA5Mi4zNjg5NS4wMDAwOyBCSUdpcFNlcnZlclNoYXJlZElJUy1VQVQ9NzU3MjA5NzcyLjIwNDgwLjAwMDA=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Host" index="7">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Z3JhZHVhdGUtc3R1ZGllcy1hcHBseS11YXQudWFsYmVydGEuY2E=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPAllHeaders>
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>R0VUIGh0dHBzOi8vZ3JhZHVhdGUtc3R1ZGllcy1hcHBseS11YXQudWFsYmVydGEuY2EvdXJkL3NpdHMudXJkL2phdmFzY3JpcHQvc2l0c19hamF4LmpzP3Y9ODgxLjIgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChXaW5kb3dzIE5UIDEwLjA7IFdPVzY0OyBydjo2NC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzY0LjANCkFjY2VwdDogKi8qDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLUdCLGVuO3E9MC41DQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUNClJlZmVyZXI6IGh0dHBzOi8vZ3JhZHVhdGUtc3R1ZGllcy1hcHBseS11YXQudWFsYmVydGEuY2EvdXJkL3NpdHMudXJkL3J1bi9zaXdfcG9ydGFsLnVybD8yOURDNjJFM0RBMUI0ODQ0d1EyS3F6VnhmaDVRX2l2QXdXM3M4Z1JlTG5sa3NWQkZqOGU4UThvTVJRajBDV0NTYUZUNUgxaHQ3LV9SNTI0M01vYlRkV1BXa29pcThzekNYQU9MaWt3dDZOdGU0Mk5UMlQ2RW1GZDlrOVkNCkROVDogMQ0KQ29va2llOiBKU0VTU0lPTklEPTFEN0I0NjM1OTIwNTVFNTc4OERBMDAyNzE3OTY4QkZEOyBCSUdpcFNlcnZlclNJVFNBUFAtVUFULUhUVFAuYXBwflNJVFNBUFAtVUFULUhUVFBfcG9vbD0xMDkyNzU0MDkyLjM2ODk1LjAwMDA7IEJJR2lwU2VydmVyU2hhcmVkSUlTLVVBVD03NTcyMDk3NzIuMjA0ODAuMDAwMA0KSG9zdDogZ3JhZHVhdGUtc3R1ZGllcy1hcHBseS11YXQudWFsYmVydGEuY2ENCg0K</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPAllHeaders>
          <HTTPCookies>
            <HTTPHeaderEntity name="JSESSIONID" index="0">
              <HTTPDataSet>
                <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                  <ActualData>MUQ3QjQ2MzU5MjA1NUU1Nzg4REEwMDI3MTc5NjhCRkQ=</ActualData>
                </HTTPData>
              </HTTPDataSet>
              <IsExternalData>false</IsExternalData>
            </HTTPHeaderEntity>
            <HTTPHeaderEntity name="BIGipServerSITSAPP-UAT-HTTP.app~SITSAPP-UAT-HTTP_pool" index="1">
              <HTTPDataSet>
                <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                  <ActualData>MTA5Mjc1NDA5Mi4zNjg5NS4wMDAw</ActualData>
                </HTTPData>
              </HTTPDataSet>
              <IsExternalData>false</IsExternalData>
            </HTTPHeaderEntity>
            <HTTPHeaderEntity name="BIGipServerSharedIIS-UAT" index="2">
              <HTTPDataSet>
                <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                  <ActualData>NzU3MjA5NzcyLjIwNDgwLjAwMDA=</ActualData>
                </HTTPData>
              </HTTPDataSet>
              <IsExternalData>false</IsExternalData>
            </HTTPHeaderEntity>
          </HTTPCookies>
        </HTTPHeaders>
      </HTTPRequest>
      <HTTPResponse>
        <contentLenght>91957</contentLenght>
        <HTTPHeaders>
          <HTTPHeaderEntity name="Content-Type" index="0">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>YXBwbGljYXRpb24vamF2YXNjcmlwdA==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Last-Modified" index="1">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>RnJpLCAxNCBKdWwgMjAxNyAyMjoyOToyMSBHTVQ=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Accept-Ranges" index="2">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Ynl0ZXM=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="ETag" index="3">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>ImQ0MmI3MWEzZjBmY2QyMTowIg==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Server" index="4">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>TWljcm9zb2Z0LUlJUy84LjU=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="X-Powered-By" index="5">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>QVNQLk5FVA==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Date" index="6">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>V2VkLCAwMiBKYW4gMjAxOSAxNjo0MzowNyBHTVQ=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Content-Length" index="7">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>OTE5NTc=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Vary" index="8">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>QWNjZXB0LUVuY29kaW5n</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Content-Encoding" index="9">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Z3ppcA==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Connection" index="10">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>S2VlcC1BbGl2ZQ==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPAllHeaders>
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>SFRUUC8xLjEgMjAwIE9LDQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2phdmFzY3JpcHQNCkxhc3QtTW9kaWZpZWQ6IEZyaSwgMTQgSnVsIDIwMTcgMjI6Mjk6MjEgR01UDQpBY2NlcHQtUmFuZ2VzOiBieXRlcw0KRVRhZzogImQ0MmI3MWEzZjBmY2QyMTowIg0KU2VydmVyOiBNaWNyb3NvZnQtSUlTLzguNQ0KWC1Qb3dlcmVkLUJ5OiBBU1AuTkVUDQpEYXRlOiBXZWQsIDAyIEphbiAyMDE5IDE2OjQzOjA3IEdNVA0KQ29udGVudC1MZW5ndGg6IDkxOTU3DQpWYXJ5OiBBY2NlcHQtRW5jb2RpbmcNCkNvbnRlbnQtRW5jb2Rpbmc6IGd6aXANCkNvbm5lY3Rpb246IEtlZXAtQWxpdmUNCg0K</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPAllHeaders>
        </HTTPHeaders>
        <HTTPBody>
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData></ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPBody>
        <TcpPackets>
          <PacketInfo time="1085862656" offset="0" length="333" />
          <PacketInfo time="1085862656" offset="333" length="91957" />
        </TcpPackets>
      </HTTPResponse>
    </HTTPTask>
    <HTTPTask id="6122" hostname="graduate-studies-apply-uat.ualberta.ca" path="https://graduate-studies-apply-uat.ualberta.ca/urd/sits.urd/images/newupdated/newcop.gif" url="https://graduate-studies-apply-uat.ualberta.ca/urd/sits.urd/images/newupdated/newcop.gif" ip="129.128.12.49" port="443" connectionId="56" origin="HTML" frame="1" startDateTime="2019-01-02T11:43:29.457-05:00" startTime="1085862906" endTime="1085862906">
      <HTTPRequest method="GET">
        <HTTPHeaders>
          <HTTPHeaderEntity name="User-Agent" index="0">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>TW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV09XNjQ7IHJ2OjY0LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvNjQuMA==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Accept" index="1">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Ki8q</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Accept-Language" index="2">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>ZW4tR0IsZW47cT0wLjU=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Accept-Encoding" index="3">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Z3ppcCwgZGVmbGF0ZQ==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Referer" index="4">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>aHR0cHM6Ly9ncmFkdWF0ZS1zdHVkaWVzLWFwcGx5LXVhdC51YWxiZXJ0YS5jYS91cmQvc2l0cy51cmQvcnVuL3Npd19wb3J0YWwudXJsPzI5REM2MkUzREExQjQ4NDR3UTJLcXpWeGZoNVFfaXZBd1czczhnUmVMbmxrc1ZCRmo4ZThROG9NUlFqMENXQ1NhRlQ1SDFodDctX1I1MjQzTW9iVGRXUFdrb2lxOHN6Q1hBT0xpa3d0Nk50ZTQyTlQyVDZFbUZkOWs5WQ==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="DNT" index="5">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>MQ==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Cookie" index="6">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>SlNFU1NJT05JRD0xRDdCNDYzNTkyMDU1RTU3ODhEQTAwMjcxNzk2OEJGRDsgQklHaXBTZXJ2ZXJTSVRTQVBQLVVBVC1IVFRQLmFwcH5TSVRTQVBQLVVBVC1IVFRQX3Bvb2w9MTA5Mjc1NDA5Mi4zNjg5NS4wMDAwOyBCSUdpcFNlcnZlclNoYXJlZElJUy1VQVQ9NzU3MjA5NzcyLjIwNDgwLjAwMDA=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Host" index="7">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Z3JhZHVhdGUtc3R1ZGllcy1hcHBseS11YXQudWFsYmVydGEuY2E=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPAllHeaders>
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>R0VUIGh0dHBzOi8vZ3JhZHVhdGUtc3R1ZGllcy1hcHBseS11YXQudWFsYmVydGEuY2EvdXJkL3NpdHMudXJkL2ltYWdlcy9uZXd1cGRhdGVkL25ld2NvcC5naWYgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChXaW5kb3dzIE5UIDEwLjA7IFdPVzY0OyBydjo2NC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzY0LjANCkFjY2VwdDogKi8qDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLUdCLGVuO3E9MC41DQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUNClJlZmVyZXI6IGh0dHBzOi8vZ3JhZHVhdGUtc3R1ZGllcy1hcHBseS11YXQudWFsYmVydGEuY2EvdXJkL3NpdHMudXJkL3J1bi9zaXdfcG9ydGFsLnVybD8yOURDNjJFM0RBMUI0ODQ0d1EyS3F6VnhmaDVRX2l2QXdXM3M4Z1JlTG5sa3NWQkZqOGU4UThvTVJRajBDV0NTYUZUNUgxaHQ3LV9SNTI0M01vYlRkV1BXa29pcThzekNYQU9MaWt3dDZOdGU0Mk5UMlQ2RW1GZDlrOVkNCkROVDogMQ0KQ29va2llOiBKU0VTU0lPTklEPTFEN0I0NjM1OTIwNTVFNTc4OERBMDAyNzE3OTY4QkZEOyBCSUdpcFNlcnZlclNJVFNBUFAtVUFULUhUVFAuYXBwflNJVFNBUFAtVUFULUhUVFBfcG9vbD0xMDkyNzU0MDkyLjM2ODk1LjAwMDA7IEJJR2lwU2VydmVyU2hhcmVkSUlTLVVBVD03NTcyMDk3NzIuMjA0ODAuMDAwMA0KSG9zdDogZ3JhZHVhdGUtc3R1ZGllcy1hcHBseS11YXQudWFsYmVydGEuY2ENCg0K</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPAllHeaders>
          <HTTPCookies>
            <HTTPHeaderEntity name="JSESSIONID" index="0">
              <HTTPDataSet>
                <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                  <ActualData>MUQ3QjQ2MzU5MjA1NUU1Nzg4REEwMDI3MTc5NjhCRkQ=</ActualData>
                </HTTPData>
              </HTTPDataSet>
              <IsExternalData>false</IsExternalData>
            </HTTPHeaderEntity>
            <HTTPHeaderEntity name="BIGipServerSITSAPP-UAT-HTTP.app~SITSAPP-UAT-HTTP_pool" index="1">
              <HTTPDataSet>
                <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                  <ActualData>MTA5Mjc1NDA5Mi4zNjg5NS4wMDAw</ActualData>
                </HTTPData>
              </HTTPDataSet>
              <IsExternalData>false</IsExternalData>
            </HTTPHeaderEntity>
            <HTTPHeaderEntity name="BIGipServerSharedIIS-UAT" index="2">
              <HTTPDataSet>
                <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                  <ActualData>NzU3MjA5NzcyLjIwNDgwLjAwMDA=</ActualData>
                </HTTPData>
              </HTTPDataSet>
              <IsExternalData>false</IsExternalData>
            </HTTPHeaderEntity>
          </HTTPCookies>
        </HTTPHeaders>
      </HTTPRequest>
      <HTTPResponse>
        <contentLenght>863</contentLenght>
        <HTTPHeaders>
          <HTTPHeaderEntity name="Content-Type" index="0">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>aW1hZ2UvZ2lm</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Last-Modified" index="1">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>VHVlLCAxMSBNYXIgMjAwMyAxMjoxNDoxMCBHTVQ=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Accept-Ranges" index="2">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Ynl0ZXM=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="ETag" index="3">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>IjA5NTg0YjhjN2U3YzIxOjAi</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Server" index="4">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>TWljcm9zb2Z0LUlJUy84LjU=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="X-Powered-By" index="5">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>QVNQLk5FVA==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Date" index="6">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>V2VkLCAwMiBKYW4gMjAxOSAxNjo0MzowOCBHTVQ=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Content-Length" index="7">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>ODYz</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPAllHeaders>
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>SFRUUC8xLjEgMjAwIE9LDQpDb250ZW50LVR5cGU6IGltYWdlL2dpZg0KTGFzdC1Nb2RpZmllZDogVHVlLCAxMSBNYXIgMjAwMyAxMjoxNDoxMCBHTVQNCkFjY2VwdC1SYW5nZXM6IGJ5dGVzDQpFVGFnOiAiMDk1ODRiOGM3ZTdjMjE6MCINClNlcnZlcjogTWljcm9zb2Z0LUlJUy84LjUNClgtUG93ZXJlZC1CeTogQVNQLk5FVA0KRGF0ZTogV2VkLCAwMiBKYW4gMjAxOSAxNjo0MzowOCBHTVQNCkNvbnRlbnQtTGVuZ3RoOiA4NjMNCg0K</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPAllHeaders>
        </HTTPHeaders>
        <HTTPBody>
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>R0lGODlhGQAKAPcyH5BAEAAAEALAAAAAAZAAoAAAg8AAMIHEiwoMGDCBMKBKCw4UCGDwFAXDix4kOCEDMu3MjQ4sUAGSVq7PhxI0iTGE8i1EjR4kSVDmPKbBgQADs=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPBody>
        <TcpPackets>
          <PacketInfo time="1085862906" offset="0" length="246" />
          <PacketInfo time="1085862921" offset="246" length="863" />
        </TcpPackets>
      </HTTPResponse>
    </HTTPTask>
    <HTTPTask id="6151" hostname="graduate-studies-apply-uat.ualberta.ca" path="https://graduate-studies-apply-uat.ualberta.ca/api/emergencymessage.json?_=1546447386898" url="https://graduate-studies-apply-uat.ualberta.ca/api/emergencymessage.json?_=1546447386898" ip="129.128.12.49" port="443" connectionId="62" origin="HTML" frame="1" startDateTime="2019-01-02T11:43:29.620-05:00" startTime="1085864703" endTime="1085864718">
      <QueryString>
        <HTTPDataSet>
          <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
            <ActualData>Xz0xNTQ2NDQ3Mzg2ODk4</ActualData>
          </HTTPData>
        </HTTPDataSet>
        <IsExternalData>false</IsExternalData>
      </QueryString>
      <HTTPSplittedQueryStrings>
        <HTTPHeaderEntity name="_" index="0">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>MTU0NjQ0NzM4Njg5OA==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
      </HTTPSplittedQueryStrings>
      <HTTPRequest method="GET">
        <HTTPHeaders>
          <HTTPHeaderEntity name="User-Agent" index="0">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>TW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV09XNjQ7IHJ2OjY0LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvNjQuMA==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Accept" index="1">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>YXBwbGljYXRpb24vanNvbiwgdGV4dC9qYXZhc2NyaXB0LCAqLyo7IHE9MC4wMQ==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Accept-Language" index="2">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>ZW4tR0IsZW47cT0wLjU=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Accept-Encoding" index="3">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Z3ppcCwgZGVmbGF0ZQ==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Referer" index="4">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>aHR0cHM6Ly9ncmFkdWF0ZS1zdHVkaWVzLWFwcGx5LXVhdC51YWxiZXJ0YS5jYS91cmQvc2l0cy51cmQvcnVuL3Npd19wb3J0YWwudXJsPzI5REM2MkUzREExQjQ4NDR3UTJLcXpWeGZoNVFfaXZBd1czczhnUmVMbmxrc1ZCRmo4ZThROG9NUlFqMENXQ1NhRlQ1SDFodDctX1I1MjQzTW9iVGRXUFdrb2lxOHN6Q1hBT0xpa3d0Nk50ZTQyTlQyVDZFbUZkOWs5WQ==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Content-Type" index="5">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>YXBwbGljYXRpb24vanNvbg==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="X-Requested-With" index="6">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>WE1MSHR0cFJlcXVlc3Q=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="DNT" index="7">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>MQ==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Cookie" index="8">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>QklHaXBTZXJ2ZXJTSVRTQVBQLVVBVC1IVFRQLmFwcH5TSVRTQVBQLVVBVC1IVFRQX3Bvb2w9MTA5Mjc1NDA5Mi4zNjg5NS4wMDAwOyBCSUdpcFNlcnZlclNoYXJlZElJUy1VQVQ9NzU3MjA5NzcyLjIwNDgwLjAwMDA=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Host" index="9">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Z3JhZHVhdGUtc3R1ZGllcy1hcHBseS11YXQudWFsYmVydGEuY2E=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPAllHeaders>
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>R0VUIGh0dHBzOi8vZ3JhZHVhdGUtc3R1ZGllcy1hcHBseS11YXQudWFsYmVydGEuY2EvYXBpL2VtZXJnZW5jeW1lc3NhZ2UuanNvbj9fPTE1NDY0NDczODY4OTggSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChXaW5kb3dzIE5UIDEwLjA7IFdPVzY0OyBydjo2NC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzY0LjANCkFjY2VwdDogYXBwbGljYXRpb24vanNvbiwgdGV4dC9qYXZhc2NyaXB0LCAqLyo7IHE9MC4wMQ0KQWNjZXB0LUxhbmd1YWdlOiBlbi1HQixlbjtxPTAuNQ0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlDQpSZWZlcmVyOiBodHRwczovL2dyYWR1YXRlLXN0dWRpZXMtYXBwbHktdWF0LnVhbGJlcnRhLmNhL3VyZC9zaXRzLnVyZC9ydW4vc2l3X3BvcnRhbC51cmw/MjlEQzYyRTNEQTFCNDg0NHdRMktxelZ4Zmg1UV9pdkF3VzNzOGdSZUxubGtzVkJGajhlOFE4b01SUWowQ1dDU2FGVDVIMWh0Ny1fUjUyNDNNb2JUZFdQV2tvaXE4c3pDWEFPTGlrd3Q2TnRlNDJOVDJUNkVtRmQ5azlZDQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2pzb24NClgtUmVxdWVzdGVkLVdpdGg6IFhNTEh0dHBSZXF1ZXN0DQpETlQ6IDENCkNvb2tpZTogQklHaXBTZXJ2ZXJTSVRTQVBQLVVBVC1IVFRQLmFwcH5TSVRTQVBQLVVBVC1IVFRQX3Bvb2w9MTA5Mjc1NDA5Mi4zNjg5NS4wMDAwOyBCSUdpcFNlcnZlclNoYXJlZElJUy1VQVQ9NzU3MjA5NzcyLjIwNDgwLjAwMDANCkhvc3Q6IGdyYWR1YXRlLXN0dWRpZXMtYXBwbHktdWF0LnVhbGJlcnRhLmNhDQoNCg==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPAllHeaders>
          <HTTPCookies>
            <HTTPHeaderEntity name="BIGipServerSITSAPP-UAT-HTTP.app~SITSAPP-UAT-HTTP_pool" index="0">
              <HTTPDataSet>
                <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                  <ActualData>MTA5Mjc1NDA5Mi4zNjg5NS4wMDAw</ActualData>
                </HTTPData>
              </HTTPDataSet>
              <IsExternalData>false</IsExternalData>
            </HTTPHeaderEntity>
            <HTTPHeaderEntity name="BIGipServerSharedIIS-UAT" index="1">
              <HTTPDataSet>
                <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                  <ActualData>NzU3MjA5NzcyLjIwNDgwLjAwMDA=</ActualData>
                </HTTPData>
              </HTTPDataSet>
              <IsExternalData>false</IsExternalData>
            </HTTPHeaderEntity>
          </HTTPCookies>
        </HTTPHeaders>
      </HTTPRequest>
      <HTTPResponse>
        <contentLenght>741</contentLenght>
        <HTTPHeaders>
          <HTTPHeaderEntity name="Content-Type" index="0">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>dGV4dC9odG1s</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Server" index="1">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>TWljcm9zb2Z0LUlJUy84LjU=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="X-Powered-By" index="2">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>QVNQLk5FVA==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Date" index="3">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>V2VkLCAwMiBKYW4gMjAxOSAxNjo0MzoxMCBHTVQ=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Content-Length" index="4">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>NzQx</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Vary" index="5">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>QWNjZXB0LUVuY29kaW5n</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Content-Encoding" index="6">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>Z3ppcA==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="Connection" index="7">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>S2VlcC1BbGl2ZQ==</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPAllHeaders>
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>SFRUUC8xLjEgNDA0IE5vdCBGb3VuZA0KQ29udGVudC1UeXBlOiB0ZXh0L2h0bWwNClNlcnZlcjogTWljcm9zb2Z0LUlJUy84LjUNClgtUG93ZXJlZC1CeTogQVNQLk5FVA0KRGF0ZTogV2VkLCAwMiBKYW4gMjAxOSAxNjo0MzoxMCBHTVQNCkNvbnRlbnQtTGVuZ3RoOiA3NDENClZhcnk6IEFjY2VwdC1FbmNvZGluZw0KQ29udGVudC1FbmNvZGluZzogZ3ppcA0KQ29ubmVjdGlvbjogS2VlcC1BbGl2ZQ0KDQo=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPAllHeaders>
        </HTTPHeaders>
        <HTTPBody>
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>PCFET0NUWVBFIGh0bWwgUFVCTElDICItLy9XM0MvL0RURCBYSFRNTCAxLjAgU3RyaWN0Ly9FTiIgImh0dHA6Ly93d3cudzMub3JnL1RSL3hodG1sMS9EVEQveGh0bWwxLXN0cmljdC5kdGQiPg0KPGh0bWwgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWwiPg0KPGhlYWQ+DQo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1pc28tODg1OS0xIi8+DQo8dGl0bGU+NDA0IC0gRmlsZSBvciBkaXJlY3Rvcnkgbm90IGZvdW5kLjwvdGl0bGU+DQo8c3R5bGUgdHlwZT0idGV4dC9jc3MiPg0KPCEtLQ0KYm9keXttYXJnaW46MDtmb250LXNpemU6LjdlbTtmb250LWZhbWlseTpWZXJkYW5hLCBBcmlhbCwgSGVsdmV0aWNhLCBzYW5zLXNlcmlmO2JhY2tncm91bmQ6I0VFRUVFRTt9DQpmaWVsZHNldHtwYWRkaW5nOjAgMTVweCAxMHB4IDE1cHg7fSANCmgxe2ZvbnQtc2l6ZToyLjRlbTttYXJnaW46MDtjb2xvcjojRkZGO30NCmgye2ZvbnQtc2l6ZToxLjdlbTttYXJnaW46MDtjb2xvcjojQ0MwMDAwO30gDQpoM3tmb250LXNpemU6MS4yZW07bWFyZ2luOjEwcHggMCAwIDA7Y29sb3I6IzAwMDAwMDt9IA0KI2hlYWRlcnt3aWR0aDo5NiU7bWFyZ2luOjAgMCAwIDA7cGFkZGluZzo2cHggMiUgNnB4IDIlO2ZvbnQtZmFtaWx5OiJ0cmVidWNoZXQgTVMiLCBWZXJkYW5hLCBzYW5zLXNlcmlmO2NvbG9yOiNGRkY7DQpiYWNrZ3JvdW5kLWNvbG9yOiM1NTU1NTU7fQ0KI2NvbnRlbnR7bWFyZ2luOjAgMCAwIDIlO3Bvc2l0aW9uOnJlbGF0aXZlO30NCi5jb250ZW50LWNvbnRhaW5lcntiYWNrZ3JvdW5kOiNGRkY7d2lkdGg6OTYlO21hcmdpbi10b3A6OHB4O3BhZGRpbmc6MTBweDtwb3NpdGlvbjpyZWxhdGl2ZTt9DQotLT4NCjwvc3R5bGU+DQo8L2hlYWQ+DQo8Ym9keT4NCjxkaXYgaWQ9ImhlYWRlciI+PGgxPlNlcnZlciBFcnJvcjwvaDE+PC9kaXY+DQo8ZGl2IGlkPSJjb250ZW50Ij4NCiA8ZGl2IGNsYXNzPSJjb250ZW50LWNvbnRhaW5lciI+PGZpZWxkc2V0Pg0KICA8aDI+NDA0IC0gRmlsZSBvciBkaXJlY3Rvcnkgbm90IGZvdW5kLjwvaDI+DQogIDxoMz5UaGUgcmVzb3VyY2UgeW91IGFyZSBsb29raW5nIGZvciBtaWdodCBoYXZlIGJlZW4gcmVtb3ZlZCwgaGFkIGl0cyBuYW1lIGNoYW5nZWQsIG9yIGlzIHRlbXBvcmFyaWx5IHVuYXZhaWxhYmxlLjwvaDM+DQogPC9maWVsZHNldD48L2Rpdj4NCjwvZGl2Pg0KPC9ib2R5Pg0KPC9odG1sPg0K</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPBody>
        <TcpPackets>
          <PacketInfo time="1085864718" offset="0" length="230" />
          <PacketInfo time="1085864718" offset="230" length="741" />
        </TcpPackets>
      </HTTPResponse>
    </HTTPTask>
  </HTTPTask>
  <HTTPTask id="6142" hostname="graduate-studies-apply-uat.ualberta.ca" path="https://graduate-studies-apply-uat.ualberta.ca/urd/sits.urd/css/uoa_files/index_files/all.js?v=930.1" url="https://graduate-studies-apply-uat.ualberta.ca/urd/sits.urd/css/uoa_files/index_files/all.js?v=930.1" ip="129.128.12.49" port="443" connectionId="60" origin="ExtraRes" frame="1" startDateTime="2019-01-02T11:43:29.517-05:00" startTime="1085863625" endTime="1085863625">
    <QueryString>
      <HTTPDataSet>
        <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
          <ActualData>dj05MzAuMQ==</ActualData>
        </HTTPData>
      </HTTPDataSet>
      <IsExternalData>false</IsExternalData>
    </QueryString>
    <HTTPSplittedQueryStrings>
      <HTTPHeaderEntity name="v" index="0">
        <HTTPDataSet>
          <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
            <ActualData>OTMwLjE=</ActualData>
          </HTTPData>
        </HTTPDataSet>
        <IsExternalData>false</IsExternalData>
      </HTTPHeaderEntity>
    </HTTPSplittedQueryStrings>
    <HTTPRequest method="GET">
      <HTTPHeaders>
        <HTTPHeaderEntity name="User-Agent" index="0">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>TW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV09XNjQ7IHJ2OjY0LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvNjQuMA==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Accept" index="1">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>Ki8q</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Accept-Language" index="2">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>ZW4tR0IsZW47cT0wLjU=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Accept-Encoding" index="3">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>Z3ppcCwgZGVmbGF0ZQ==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Referer" index="4">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>aHR0cHM6Ly9ncmFkdWF0ZS1zdHVkaWVzLWFwcGx5LXVhdC51YWxiZXJ0YS5jYS91cmQvc2l0cy51cmQvcnVuL3Npd19wb3J0YWwudXJsPzI5REM2MkUzREExQjQ4NDR3UTJLcXpWeGZoNVFfaXZBd1czczhnUmVMbmxrc1ZCRmo4ZThROG9NUlFqMENXQ1NhRlQ1SDFodDctX1I1MjQzTW9iVGRXUFdrb2lxOHN6Q1hBT0xpa3d0Nk50ZTQyTlQyVDZFbUZkOWs5WQ==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="DNT" index="5">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>MQ==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Cookie" index="6">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>SlNFU1NJT05JRD0xRDdCNDYzNTkyMDU1RTU3ODhEQTAwMjcxNzk2OEJGRDsgQklHaXBTZXJ2ZXJTSVRTQVBQLVVBVC1IVFRQLmFwcH5TSVRTQVBQLVVBVC1IVFRQX3Bvb2w9MTA5Mjc1NDA5Mi4zNjg5NS4wMDAwOyBCSUdpcFNlcnZlclNoYXJlZElJUy1VQVQ9NzU3MjA5NzcyLjIwNDgwLjAwMDA=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Host" index="7">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>Z3JhZHVhdGUtc3R1ZGllcy1hcHBseS11YXQudWFsYmVydGEuY2E=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPAllHeaders>
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>R0VUIGh0dHBzOi8vZ3JhZHVhdGUtc3R1ZGllcy1hcHBseS11YXQudWFsYmVydGEuY2EvdXJkL3NpdHMudXJkL2Nzcy91b2FfZmlsZXMvaW5kZXhfZmlsZXMvYWxsLmpzP3Y9OTMwLjEgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChXaW5kb3dzIE5UIDEwLjA7IFdPVzY0OyBydjo2NC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzY0LjANCkFjY2VwdDogKi8qDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLUdCLGVuO3E9MC41DQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUNClJlZmVyZXI6IGh0dHBzOi8vZ3JhZHVhdGUtc3R1ZGllcy1hcHBseS11YXQudWFsYmVydGEuY2EvdXJkL3NpdHMudXJkL3J1bi9zaXdfcG9ydGFsLnVybD8yOURDNjJFM0RBMUI0ODQ0d1EyS3F6VnhmaDVRX2l2QXdXM3M4Z1JlTG5sa3NWQkZqOGU4UThvTVJRajBDV0NTYUZUNUgxaHQ3LV9SNTI0M01vYlRkV1BXa29pcThzekNYQU9MaWt3dDZOdGU0Mk5UMlQ2RW1GZDlrOVkNCkROVDogMQ0KQ29va2llOiBKU0VTU0lPTklEPTFEN0I0NjM1OTIwNTVFNTc4OERBMDAyNzE3OTY4QkZEOyBCSUdpcFNlcnZlclNJVFNBUFAtVUFULUhUVFAuYXBwflNJVFNBUFAtVUFULUhUVFBfcG9vbD0xMDkyNzU0MDkyLjM2ODk1LjAwMDA7IEJJR2lwU2VydmVyU2hhcmVkSUlTLVVBVD03NTcyMDk3NzIuMjA0ODAuMDAwMA0KSG9zdDogZ3JhZHVhdGUtc3R1ZGllcy1hcHBseS11YXQudWFsYmVydGEuY2ENCg0K</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPAllHeaders>
        <HTTPCookies>
          <HTTPHeaderEntity name="JSESSIONID" index="0">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>MUQ3QjQ2MzU5MjA1NUU1Nzg4REEwMDI3MTc5NjhCRkQ=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="BIGipServerSITSAPP-UAT-HTTP.app~SITSAPP-UAT-HTTP_pool" index="1">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>MTA5Mjc1NDA5Mi4zNjg5NS4wMDAw</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
          <HTTPHeaderEntity name="BIGipServerSharedIIS-UAT" index="2">
            <HTTPDataSet>
              <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
                <ActualData>NzU3MjA5NzcyLjIwNDgwLjAwMDA=</ActualData>
              </HTTPData>
            </HTTPDataSet>
            <IsExternalData>false</IsExternalData>
          </HTTPHeaderEntity>
        </HTTPCookies>
      </HTTPHeaders>
    </HTTPRequest>
    <HTTPResponse>
      <contentLenght>85830</contentLenght>
      <HTTPHeaders>
        <HTTPHeaderEntity name="Content-Type" index="0">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>YXBwbGljYXRpb24vamF2YXNjcmlwdA==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Last-Modified" index="1">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>VHVlLCAyNCBGZWIgMjAxNSAxNzoyNDozNCBHTVQ=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Accept-Ranges" index="2">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>Ynl0ZXM=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="ETag" index="3">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>IjA3NWE1YzE1NjUwZDAxOjAi</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Server" index="4">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>TWljcm9zb2Z0LUlJUy84LjU=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="X-Powered-By" index="5">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>QVNQLk5FVA==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Date" index="6">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>V2VkLCAwMiBKYW4gMjAxOSAxNjo0MzowOCBHTVQ=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Content-Length" index="7">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>ODU4MzA=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Vary" index="8">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>QWNjZXB0LUVuY29kaW5n</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Content-Encoding" index="9">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>Z3ppcA==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Connection" index="10">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>S2VlcC1BbGl2ZQ==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPAllHeaders>
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>SFRUUC8xLjEgMjAwIE9LDQpDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2phdmFzY3JpcHQNCkxhc3QtTW9kaWZpZWQ6IFR1ZSwgMjQgRmViIDIwMTUgMTc6MjQ6MzQgR01UDQpBY2NlcHQtUmFuZ2VzOiBieXRlcw0KRVRhZzogIjA3NWE1YzE1NjUwZDAxOjAiDQpTZXJ2ZXI6IE1pY3Jvc29mdC1JSVMvOC41DQpYLVBvd2VyZWQtQnk6IEFTUC5ORVQNCkRhdGU6IFdlZCwgMDIgSmFuIDIwMTkgMTY6NDM6MDggR01UDQpDb250ZW50LUxlbmd0aDogODU4MzANClZhcnk6IEFjY2VwdC1FbmNvZGluZw0KQ29udGVudC1FbmNvZGluZzogZ3ppcA0KQ29ubmVjdGlvbjogS2VlcC1BbGl2ZQ0KDQo=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPAllHeaders>
      </HTTPHeaders>
      <HTTPBody>
        <HTTPDataSet>
          <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
            <ActualData></ActualData>
          </HTTPData>
        </HTTPDataSet>
        <IsExternalData>false</IsExternalData>
      </HTTPBody>
      <TcpPackets>
        <PacketInfo time="1085863625" offset="0" length="332" />
        <PacketInfo time="1085863625" offset="332" length="85830" />
      </TcpPackets>
    </HTTPResponse>
  </HTTPTask>
  <HTTPTask id="6146" hostname="detectportal.firefox.com" path="http://detectportal.firefox.com/success.txt" url="http://detectportal.firefox.com/success.txt" ip="23.15.246.9" port="80" connectionId="61" origin="ExtraRes" frame="1" startDateTime="2019-01-02T11:43:29.611-05:00" startTime="1085864609" endTime="1085864625">
    <HTTPRequest method="GET">
      <HTTPHeaders>
        <HTTPHeaderEntity name="User-Agent" index="0">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>TW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV09XNjQ7IHJ2OjY0LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvNjQuMA==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Accept" index="1">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>Ki8q</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Accept-Language" index="2">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>ZW4tR0IsZW47cT0wLjU=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Accept-Encoding" index="3">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>Z3ppcCwgZGVmbGF0ZQ==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Cache-Control" index="4">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>bm8tY2FjaGU=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Pragma" index="5">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>bm8tY2FjaGU=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Host" index="6">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>ZGV0ZWN0cG9ydGFsLmZpcmVmb3guY29t</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPAllHeaders>
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>R0VUIGh0dHA6Ly9kZXRlY3Rwb3J0YWwuZmlyZWZveC5jb20vc3VjY2Vzcy50eHQgSFRUUC8xLjENClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChXaW5kb3dzIE5UIDEwLjA7IFdPVzY0OyBydjo2NC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzY0LjANCkFjY2VwdDogKi8qDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLUdCLGVuO3E9MC41DQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUNCkNhY2hlLUNvbnRyb2w6IG5vLWNhY2hlDQpQcmFnbWE6IG5vLWNhY2hlDQpIb3N0OiBkZXRlY3Rwb3J0YWwuZmlyZWZveC5jb20NCg0K</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPAllHeaders>
      </HTTPHeaders>
    </HTTPRequest>
    <HTTPResponse>
      <contentLenght>8</contentLenght>
      <HTTPHeaders>
        <HTTPHeaderEntity name="Content-Type" index="0">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>dGV4dC9wbGFpbg==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Content-Length" index="1">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>OA==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Last-Modified" index="2">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>TW9uLCAxNSBNYXkgMjAxNyAxODowNDo0MCBHTVQ=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="ETag" index="3">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>ImFlNzgwNTg1ZjQ5Yjk0Y2UxNDQ0ZWI3ZDI4OTA2MTIzIg==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Accept-Ranges" index="4">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>Ynl0ZXM=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Server" index="5">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>QW1hem9uUzM=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="X-Amz-Cf-Id" index="6">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>ck9HNTFQaGVJR1JETEw2ZTdMTW00c2N6ZTFhbERDbElaYV9feV8xc0lDQjIyZzRtQnlZeHN3PT0=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Cache-Control" index="7">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>bm8tY2FjaGUsIG5vLXN0b3JlLCBtdXN0LXJldmFsaWRhdGU=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Date" index="8">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>V2VkLCAwMiBKYW4gMjAxOSAxNjo0MzoxMSBHTVQ=</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPHeaderEntity name="Connection" index="9">
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>a2VlcC1hbGl2ZQ==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPHeaderEntity>
        <HTTPAllHeaders>
          <HTTPDataSet>
            <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
              <ActualData>SFRUUC8xLjEgMjAwIE9LDQpDb250ZW50LVR5cGU6IHRleHQvcGxhaW4NCkNvbnRlbnQtTGVuZ3RoOiA4DQpMYXN0LU1vZGlmaWVkOiBNb24sIDE1IE1heSAyMDE3IDE4OjA0OjQwIEdNVA0KRVRhZzogImFlNzgwNTg1ZjQ5Yjk0Y2UxNDQ0ZWI3ZDI4OTA2MTIzIg0KQWNjZXB0LVJhbmdlczogYnl0ZXMNClNlcnZlcjogQW1hem9uUzMNClgtQW16LUNmLUlkOiByT0c1MVBoZUlHUkRMTDZlN0xNbTRzY3plMWFsRENsSVphX195XzFzSUNCMjJnNG1CeVl4c3c9PQ0KQ2FjaGUtQ29udHJvbDogbm8tY2FjaGUsIG5vLXN0b3JlLCBtdXN0LXJldmFsaWRhdGUNCkRhdGU6IFdlZCwgMDIgSmFuIDIwMTkgMTY6NDM6MTEgR01UDQpDb25uZWN0aW9uOiBrZWVwLWFsaXZlDQoNCg==</ActualData>
            </HTTPData>
          </HTTPDataSet>
          <IsExternalData>false</IsExternalData>
        </HTTPAllHeaders>
      </HTTPHeaders>
      <HTTPBody>
        <HTTPDataSet>
          <HTTPData dataFilePath="" dfeDataType="Raw" sectionDataType="1">
            <ActualData>c3VjY2Vzcwo=</ActualData>
          </HTTPData>
        </HTTPDataSet>
        <IsExternalData>false</IsExternalData>
      </HTTPBody>
      <TcpPackets>
        <PacketInfo time="1085864609" offset="0" length="376" />
        <PacketInfo time="1085864625" offset="376" length="8" />
      </TcpPackets>
    </HTTPResponse>
  </HTTPTask>
</HTTPSnapshot>